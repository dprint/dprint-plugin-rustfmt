name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
    tags:
    - '*'

jobs:
  build:
    name: ${{ matrix.config.kind }} ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - os: ubuntu-latest
            kind: test_release
          - os: macOS-latest
            kind: test_release
          - os: windows-2019
            kind: test_release

    outputs:
      LINUX_ZIP_CHECKSUM: ${{steps.linux_pre_release.outputs.ZIP_CHECKSUM}}
      LINUX_MUSL_ZIP_CHECKSUM: ${{steps.linux_musl_pre_release.outputs.ZIP_CHECKSUM}}
      MAC_ZIP_CHECKSUM: ${{steps.mac_pre_release.outputs.ZIP_CHECKSUM}}
      WINDOWS_ZIP_CHECKSUM: ${{steps.windows_pre_release.outputs.ZIP_CHECKSUM}}

    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full
      CFG_RELEASE_CHANNEL: nightly

    steps:
    # Setup
    - uses: actions/checkout@v2

    - uses: dtolnay/rust-toolchain@stable

    - name: Extract Rust release version and set CFG_RELEASE env variable
      run: |
        # See https://sed.js.org/?gist=733942438b671befe20b6e7b5dfac57f for an explanation of the regex
        echo "CFG_RELEASE=$(cargo --version | sed -rn 's/cargo\s(.*)\s\(.*\)/\1/p')" >> $GITHUB_ENV

    - name: Cache cargo
      if: startsWith(github.ref, 'refs/tags/') != true
      uses: Swatinem/rust-cache@v1

    # Build
    - name: Build release
      if: matrix.config.kind == 'test_release'
      run: cargo build --bin dprint-plugin-rustfmt --release

    - name: Test release
      if: matrix.config.kind == 'test_release'
      run: cargo test --release

    - name: Build release(musl)
      if: matrix.config.kind == 'test_release'
      run: |
        sudo apt install musl musl-dev musl-tools
        rustup target add x86_64-unknown-linux-musl
        cargo build --release --target x86_64-unknown-linux-musl

    # Release
    - name: Pre-release (Linux)
      id: linux_pre_release
      if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      run: |
          cd target/release
          zip -r dprint-plugin-rustfmt-x86_64-unknown-linux-gnu.zip dprint-plugin-rustfmt dprint-plugin-rustfmt
          echo "::set-output name=ZIP_CHECKSUM::$(shasum -a 256 dprint-plugin-rustfmt-x86_64-unknown-linux-gnu.zip | awk '{print $1}')"
    - name: Pre-release (Linux-musl)
      id: linux_musl_pre_release
      if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      run: |
          cd target/x86_64-unknown-linux-musl/release
          zip -r dprint-plugin-rustfmt-x86_64-unknown-linux-musl.zip dprint-plugin-rustfmt dprint-plugin-rustfmt
          echo "::set-output name=ZIP_CHECKSUM::$(shasum -a 256 dprint-plugin-rustfmt-x86_64-unknown-linux-musl.zip | awk '{print $1}')"
          mv dprint-plugin-rustfmt-x86_64-unknown-linux-musl.zip ../../release
    - name: Pre-release (Mac)
      id: mac_pre_release
      if: startsWith(matrix.config.os, 'macOS') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      run: |
          cd target/release
          zip -r dprint-plugin-rustfmt-x86_64-apple-darwin.zip dprint-plugin-rustfmt dprint-plugin-rustfmt
          echo "::set-output name=ZIP_CHECKSUM::$(shasum -a 256 dprint-plugin-rustfmt-x86_64-apple-darwin.zip | awk '{print $1}')"
    - name: Pre-release (Windows)
      id: windows_pre_release
      if: startsWith(matrix.config.os, 'windows') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      run: |
          cd target/release
          Compress-Archive -CompressionLevel Optimal -Force -Path dprint-plugin-rustfmt.exe -DestinationPath dprint-plugin-rustfmt-x86_64-pc-windows-msvc.zip
          echo "::set-output name=ZIP_CHECKSUM::$(shasum -a 256 dprint-plugin-rustfmt-x86_64-pc-windows-msvc.zip | awk '{print $1}')"

    # Upload Artifacts
    - name: Upload Artifacts (Linux)
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      with:
        name: linux-artifacts
        path: |
          target/release/dprint-plugin-rustfmt-x86_64-unknown-linux-gnu.zip
          target/release/dprint-plugin-rustfmt-x86_64-unknown-linux-musl.zip
    - name: Upload Artifacts (Mac)
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.config.os, 'macOS') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      with:
        name: mac-artifacts
        path: target/release/dprint-plugin-rustfmt-x86_64-apple-darwin.zip
    - name: Upload Artifacts (Windows)
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.config.os, 'windows') && matrix.config.kind == 'test_release' && startsWith(github.ref, 'refs/tags/')
      with:
        name: windows-artifacts
        path: target/release/dprint-plugin-rustfmt-x86_64-pc-windows-msvc.zip


  draft_release:
    name: draft_release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - uses: denoland/setup-deno@v1
    - name: Download artifacts
      uses: actions/download-artifact@v2

    - name: Move downloaded artifacts
      run: |
        mv linux-artifacts/dprint-plugin-rustfmt-x86_64-unknown-linux-gnu.zip .
        mv linux-artifacts/dprint-plugin-rustfmt-x86_64-unknown-linux-musl.zip .
        mv mac-artifacts/dprint-plugin-rustfmt-x86_64-apple-darwin.zip .
        mv windows-artifacts/dprint-plugin-rustfmt-x86_64-pc-windows-msvc.zip .

    - name: Output checksums
      run: |
        echo "Linux zip: ${{needs.build.outputs.LINUX_ZIP_CHECKSUM}}"
        echo "Linux-musl zip: ${{needs.build.outputs.LINUX_MUSL_ZIP_CHECKSUM}}"
        echo "Mac zip: ${{needs.build.outputs.MAC_ZIP_CHECKSUM}}"
        echo "Windows zip: ${{needs.build.outputs.WINDOWS_ZIP_CHECKSUM}}"

    - name: Create plugin file
      run: deno run --allow-read=. --allow-write=. scripts/create_plugin_file.ts

    - name: Get tag version
      id: get_tag_version
      run: echo ::set-output name=TAG_VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Get plugin file checksum
      id: get_plugin_file_checksum
      run: echo "::set-output name=CHECKSUM::$(shasum -a 256 plugin.json | awk '{print $1}')"

    - name: Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          dprint-plugin-rustfmt-x86_64-apple-darwin.zip
          dprint-plugin-rustfmt-x86_64-unknown-linux-gnu.zip
          dprint-plugin-rustfmt-x86_64-unknown-linux-musl.zip
          dprint-plugin-rustfmt-x86_64-pc-windows-msvc.zip
          plugin.json
        body: |
          ## Install

          Dependencies:

          1. Install dprint's CLI

          In dprint configuration file:

          1. Specify the plugin url and checksum in the `"plugins"` array.
          2. Ensure the `rs` extension is matched in an `"includes"` pattern.
          3. Add a `"rustfmt"` configuration property if desired.

             ```jsonc
             {
               // ...etc...
               "rustfmt": {
                 "brace_style": "AlwaysNextLine"
               },
               "includes": [
                 "**/*.{rs}"
               ],
               "plugins": [
                 "https://plugins.dprint.dev/rustfmt-${{ steps.get_tag_version.outputs.TAG_VERSION }}.json@${{ steps.get_plugin_file_checksum.outputs.CHECKSUM }}"
               ]
             }
             ```
        draft: false
